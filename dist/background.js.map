{"version":3,"file":"background.js","sources":["../sidebar/db/constants.ts","../sidebar/db/utils.ts","../background/index.ts"],"sourcesContent":["export const DB_NAME = 'contexts_db';\nexport const DB_VERSION = 1;\n","import { ContextItem } from '../models/context.model';\nimport { DB_NAME, DB_VERSION } from './constants';\n\nconst openDatabase = () => {\n    return new Promise<IDBDatabase>((resolve, reject) => {\n        const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n        request.onupgradeneeded = (event: any) => {\n            const db = event.target.result;\n            if (!db.objectStoreNames.contains('contexts')) {\n                const objectStore = db.createObjectStore('contexts', {\n                    keyPath: 'id',\n                    autoIncrement: true,\n                });\n                objectStore.createIndex('title', 'title', { unique: false });\n                objectStore.createIndex('description', 'description', {\n                    unique: false,\n                });\n            }\n        };\n\n        request.onsuccess = (event: any) => resolve(event.target.result);\n        request.onerror = () => reject(new Error('Error opening IndexedDB'));\n    });\n};\n\nconst addNewContextToDB = async (context: ContextItem) => {\n    try {\n        const db = await openDatabase(),\n            transaction = db.transaction('contexts', 'readwrite'),\n            objectStore = transaction.objectStore('contexts'),\n            request = objectStore.add(context);\n\n        return new Promise<void>((resolve, reject) => {\n            request.onsuccess = () => resolve();\n            request.onerror = () => reject(new Error('Error adding context'));\n        });\n    } catch (error) {\n        console.log('Error opening IndexedDB', error);\n        throw new Error('Error opening IndexedDB');\n    }\n};\n\nconst getAllContextsFromDB = async () => {\n    try {\n        const db = await openDatabase(),\n            transaction = db.transaction('contexts', 'readonly'),\n            objectStore = transaction.objectStore('contexts'),\n            request = objectStore.getAll();\n\n        return new Promise<ContextItem[]>((resolve, reject) => {\n            request.onsuccess = () => resolve(request.result);\n            request.onerror = () =>\n                reject(new Error('Error fetching contexts'));\n        });\n    } catch (error) {\n        console.log('Error opening IndexedDB', error);\n        throw new Error('Error opening IndexedDB');\n    }\n};\n\nconst updateContextInDB = async (updatedContext: ContextItem) => {\n    try {\n        const db = await openDatabase(),\n            transaction = db.transaction('contexts', 'readwrite'),\n            objectStore = transaction.objectStore('contexts'),\n            request = objectStore.put(updatedContext);\n\n        return new Promise<void>((resolve, reject) => {\n            request.onsuccess = () => resolve();\n            request.onerror = () => reject(new Error('Error updating context'));\n        });\n    } catch (error) {\n        console.log('Error opening IndexedDB', error);\n        throw new Error('Error opening IndexedDB');\n    }\n};\n\nexport { addNewContextToDB, getAllContextsFromDB, updateContextInDB };\n","import { getAllContextsFromDB } from '../sidebar/db/utils';\n\nlet contentType = 'contexts',\n    scrappedPageData = {\n        title: '',\n        description: '',\n    };\n\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === 'openSidePanel') {\n        contentType = message.contentType;\n        chrome.sidePanel.setOptions({ enabled: true });\n        chrome.sidePanel.open({\n            windowId: sender?.tab?.windowId || 0,\n            tabId: sender?.tab?.id,\n        });\n    }\n\n    if (message.action === 'getSidebarContentType') {\n        sendResponse({ contentType });\n    }\n\n    if (message.action === 'scrappedPageData') {\n        scrappedPageData = message.pageData;\n    }\n\n    if (message.action === 'getPageData') {\n        sendResponse({ pageData: scrappedPageData });\n    }\n\n    if (message.action === 'getContexts') {\n        (async () => {\n            try {\n                const contexts = await getAllContextsFromDB();\n                sendResponse({ data: contexts, error: null });\n            } catch (error) {\n                console.error('Error getting contexts from DB', error);\n                sendResponse({\n                    data: [],\n                    error: 'Error getting contexts from DB',\n                });\n            }\n        })();\n        return true;\n    }\n});\n"],"names":["DB_NAME","DB_VERSION","openDatabase","Promise","resolve","reject","request","indexedDB","open","onupgradeneeded","event","db","target","result","objectStoreNames","contains","objectStore","createObjectStore","keyPath","autoIncrement","createIndex","unique","onsuccess","onerror","Error","getAllContextsFromDB","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","transaction","wrap","_callee2$","_context2","prev","next","sent","getAll","abrupt","t0","console","log","stop","apply","arguments","contentType","scrappedPageData","title","description","chrome","runtime","onMessage","addListener","message","sender","sendResponse","action","_sender$tab","_sender$tab2","sidePanel","setOptions","enabled","windowId","tab","tabId","id","pageData","_callee","contexts","_callee$","_context","data","error"],"mappings":"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"}